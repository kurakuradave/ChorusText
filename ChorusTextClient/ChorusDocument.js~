/*-----------------------------------------------------------------------------\
|                                                                              |
|    ChorusTextClient - Client program for ChorusText Open Assistive Device    |
|    Copyright (C) 2014  David Effendi                                         |
|    email: kurakuradave@gmail.com                                             |
|                                                                              |
|    This program is free software: you can redistribute it and/or modify      |
|    it under the terms of the GNU General Public License as published by      |
|    the Free Software Foundation, either version 3 of the License, or         |
|    (at your option) any later version.                                       |
|                                                                              |
|    This program is distributed in the hope that it will be useful,           |
|    but WITHOUT ANY WARRANTY; without even the implied warranty of            |
|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
|    GNU General Public License for more details.                              |
|                                                                              |
|    You should have received a copy of the GNU General Public License         |
|    along with this program.  If not, see <http://www.gnu.org/licenses/>.     |
|                                                                              |
\-----------------------------------------------------------------------------*/


var util = require( 'util' );
var EventEmitter = require('events').EventEmitter;

function ChorusDocument() {

var self = this;

var visualText = "";
var ctDocu = "";
var lines = [];
var ctCursor = { 'line' : 0,
                 'word' : 0,
                 'char' : 0,
                 'baseLine' : 0,
                 'baseWord' : 0,
                 'baseChar' : 0,
                 'getLine' : function() { return this.line; },
                 'setLine' : function( val ) { this.line = this.baseLine + parseInt( val ); if( this.line>=lines.length ) this.line = lines.length - 1; },
                 'getWord' : function() { return this.word; },
                 'setWord' : function( val ) { this.word = this.baseWord + parseInt( val ); if( this.word>=lines[ this.line ].words.length ) this.word = lines[ this.line ].words.length - 1; if( this.word < 0 ) this.word = 0; },
                 'getChar' : function() { return this.char; },
                 'setChar' : function( val ) { 
                                 this.char = this.baseChar + parseInt( val ); 
                                 if( this.char>=lines[ this.line ].words[ this.word ].chars.length ) this.char = lines[ this.line ].words[ this.word ].chars.length - 1; if( this.char < 0 ) this.char = 0; },
                 'getBaseLine' : function() { return this.baseLine; },
                 'setBaseLine' : function( val ) { 
                                     var tlines = lines.length;
                                     if( tlines <= 0 ) {
                                         //console.log( "tlines is an empty array, setting baseLine to 0" );
                                         this.baseLine = 0;
                                     } else {
                                         var pVal = parseInt( val ); 
                                         this.baseLine = pVal;
                                         if( this.baseLine < 0 ) 
                                             this.baseLine = 0; 
                                         else if( this.baseLine > lines.length - 1 ) 
                                             this.baseLine = lines.length - 1; 
                                     }
                                 },
                 'getBaseWord' : function() { return this.baseWord; },
                 'setBaseWord' : function( val ) {
                                     if( this.line < lines.length ) {
                                         var twords = lines[this.line].words.length;
                                         if( twords <= 0 ) {
                                             //console.log( "twords is an empty array, setting baseWord to 0" );
                                             this.baseWord = 0;
                                         } else {
                                             var pVal = parseInt( val ); 
                                             this.baseWord = pVal; 
                                             if( this.baseWord < 0 ) 
                                                 this.baseWord = 0; 
                                             else if( this.baseWord > lines[ this.line ].words.length - 1 ) 
                                                 this.baseWord = lines[this.line].words.length - 1; 
                                         }
                                     } else { 
                                         this.baseWord = 0; // line out of range, set baseWord to 0
                                     }
                                 },
                 'getBaseChar' : function() { return this.baseChar; },
                 'setBaseChar' : function( val ) { 
                                     var tchars = lines[this.line].words[this.word].chars.length;
                                     if( tchars <= 0 ) {
                                         //console.log( "tchars is an empty array, setting baseChar to 0" );
                                         this.baseChar = 0;
                                     } else {
                                         var pVal = parseInt( val ); 
                                         this.baseChar = pVal; 
                                         if( this.baseChar < 0 ) 
                                             this.baseChar = 0; 
                                         else if( this.baseChar > lines[this.line].words[this.word].chars.length - 1 ) {
                                             this.baseChar = lines[this.line].words[this.word].chars.length - 1; 
                                         }
                                     }
                                 } 
               };
var activeLines = [];



self.setVisualText = function( someText ){
    var temp = "";
    if( someText != "" ) {
        temp = someText.replace( /\. /g, ".\n" );
    }
    visualText = temp;
    console.log( visualText );
};




self.resetCursor = function() {
    ctCursor.setLine( 0 );
    ctCursor.setWord( 0 );
    ctCursor.setChar( 0 );
};




self.parseToCTDocu = function() {
    if( visualText == "" ) {
        // blank document, throw an error
    } else {
        self.loadCTDocu( visualText );
    }
    self.resetCursor();
};




self.loadCTDocu = function( someText ) {
    lines = [];
    var tempLines = someText.split( "\n" );
    for( var i = 0; i < tempLines.length; i++ ) {
        var tline = tempLines[ i ];
        var aLineObj = self.buildLine( i, tline );
        aLineObj.rebuild();
        lines[ i ] = aLineObj;
    }
};




self.buildLine = function( someIndex, someLine ) {
    console.log( "in buildLine()" );
    var wordObjs = [];
    var tempWords = someLine.split( " " );
    for( var i = 0; i < tempWords.length; i++ ) {
        var tword = tempWords[ i ];
        var aWordObj = self.buildWord( i, tword );
        aWordObj.rebuild();
        wordObjs[ i ] = aWordObj;
    }
    
    // for lines that contains a spaceword
    if( someLine == "" ) someLine = " ";

    return { 'index' : someIndex, 
             'text' : someLine, 
             'words' : wordObjs,
             'rebuild' : function() {
                 this.text = "";
                 for( var i = 0; i < this.words.length; i++ ) {
                     this.words[ i ].index = i;
                     this.text += this.words[ i ].text; // not adding space here coz there's a space at end of each word already
                     console.log( ">>>>>>>>>>>>>>>>>>>>" + this.text );
                 }
                 this.text.substring( 0, this.text.length );
                 //console.log( "line rebuilt!" );
                 //console.log( this );
               }
    };
};




self.buildWord = function( someIndex, someWord ) {
    var charObjs = [];
    var tempChars = someWord.split( '' );
    for( var i = 0; i < tempChars.length; i++ ) {
        var tchar = tempChars[ i ];
        var aCharObj = self.buildChar( i, tchar );
        charObjs[ i ] = aCharObj;
    }
    // adds a space at the end of the word
    charObjs[ charObjs.length ] = self.buildChar( charObjs.length, " " );
    
    return { 'index' : someIndex, 
             'text' : someWord, 
             'chars' : charObjs,
             'rebuild' : function() {
                 //console.log( "rebuilding characters..." );
                 this.text = "";
                 for( var i = 0; i < this.chars.length; i++ ) {
                     this.chars[ i ].index = i;
                     this.text += this.chars[ i ].text;
                 }
             }
    };
};




self.buildChar = function( someIndex, someChar ) {
    return { 'index' : someIndex, 
             'text' : someChar 
    };
};



self.buildVisualText = function() {
    this.visualText = "";
    for( i = 0; i < lines.length; i++ ) {
        lines[ i ].index = i;
        visualText += lines[ i ].text + "\n";
    }
    visualText = visualText.substring( 0, visualText.length - 2 );
};




self.addSpaceWord = function( targetPos ) {
// adds a word containing a space char at a specified position
    var spaceChar = self.buildChar( 0, " " ); // creates a char object with text " ", and at index 0 of the word
    var theWord = { 
             'index' : targetPos.word, 
             'text' : "", 
             'chars' : [spaceChar],
             'rebuild' : function() {
                 //console.log( "rebuilding characters..." );
                 this.text = "";
                 for( var i = 0; i < this.chars.length; i++ ) {
                     this.chars[ i ].index = i;
                     this.text += this.chars[ i ].text;
                     console.log( this.chars[ i ].text );
                 }
                 console.log( "word rebuild, text: " + this.text );
             }
    };
    theWord.rebuild();
    lines[ targetPos.line ].words.splice( targetPos.word, 0, theWord );
    lines[ targetPos.line ].rebuild();
    self.buildVisualText();
};




self.addSpaceLine = function( targetPos ) {
// adds a line containing a word, containing a space char
    var theLine = { 
             'index' : targetPos.line, 
             'text' : "", 
             'words' : [],
             'rebuild' : function() {
                 this.text = "";
                 for( var i = 0; i < this.words.length; i++ ) {
                     this.words[ i ].index = i;
                     this.text += this.words[ i ].text; // not adding space here coz there's a space at end of each word already
                     console.log( this.text );
                 }
                 this.text.substring( 0, this.text.length );
                 //console.log( "line rebuilt!" );
                 //console.log( this );
             }
    };
    theLine.words.push( self.addSpaceWord( targetPos ) );
    lines[ targetPos.line ] = theLine;
    console.log( lines[ targetPos.line ] );
};




self.updateCursor = function( tactileInputObj, callback ) {
    // determine which element to update: line/word/char
    if( tactileInputObj.hasOwnProperty( 'c' ) ){ // char
        console.log( "     tactileInputObj hasOwnProperty c" );
        if( self.getCursorLine() != -1 && self.getCursorWord() != -1 ) {
            self.setCursorChar( tactileInputObj.c, function( doRead ) {  
                if( doRead ) callback( true ); else callback();
            } ); // baseChar offset is done in setChar() within Chursor object
        } 
    } 

    if( tactileInputObj.hasOwnProperty( 'w' ) ){
        console.log( "     tactileInputObj hasOwnProperty w" );
        if( self.getCursorLine() != -1 ) {
            // reset dependant(s)
            self.setCursorBaseChar( "t" );
            self.setCursorWord( tactileInputObj.w, function( doRead ) {  
                if( doRead ) callback( true ); else callback();
            } );
        }
    }

    if( tactileInputObj.hasOwnProperty( 'l' ) ){ // line
        //console.log( "     tactileInputObj hasOwnProperty l" );
        // reset dependant(s) first, otherwise it will trip upon new cursorline that has no words or chars
        self.setCursorBaseWord( "t" );
        self.setCursorBaseChar( "t" );
        self.setCursorLine( tactileInputObj.l, function( doRead ) {  
                if( doRead ) callback( true ); else callback();
        } );
    }
};




self.updateCursorBase = function( tactileInputObj ) {
    if( tactileInputObj.hasOwnProperty( 'c' ) ) { // char
        self.setCursorBaseChar( tactileInputObj.c );
    }
    if( tactileInputObj.hasOwnProperty( 'w' ) ) { // word
        self.setCursorBaseWord( tactileInputObj.w );
    }
    if( tactileInputObj.hasOwnProperty( 'l' ) ) { // line
        self.setCursorBaseLine( tactileInputObj.l );
    }
};




self.setCursorBaseChar = function( textVal ) {
    // textVal is one of: "t" / "u" / "d" / "b"
    if( textVal == "t" ){ //top
        ctCursor.setBaseChar( 0 );
        ctCursor.setChar( 0 );
    }
    if( textVal == "u" ) { // scrollup
        ctCursor.setBaseChar( ctCursor.getChar() - 9 );
    }
    if( textVal == "d" ) { // scrolldown
        ctCursor.setBaseChar( ctCursor.getChar() );
    }
    if( textVal == "b" ) { // bottom
        var posLastChar = lines[ ctCursor.getLine() ].words[ ctCursor.getWord() ].chars.length - 1;
        ctCursor.setChar( posLastChar );
        ctCursor.setBaseChar( posLastChar - 9 );
    }
    // boundary check
    if( ctCursor.getBaseChar() < 0 ) {
        ctCursor.setBaseChar( 0 );
    }
    if( ctCursor.getBaseChar() > lines[ ctCursor.getLine() ].words[ ctCursor.getWord() ].chars.length - 1 ) {
        ctCursor.setBaseChar( lines[ ctCursor.getLine() ].words[ ctCursor.getWord() ].chars.length - 1  );
    }
};




self.setCursorBaseWord = function( textVal ) {
    // textVal is one of: "t" / "u" / "d" / "b"
    if( textVal == "t" ){ //top
        ctCursor.setBaseWord( 0 );
        ctCursor.setWord( 0 );
    }
    if( textVal == "u" ) { // scrollup
        ctCursor.setBaseWord( ctCursor.getWord() - 9 );
    }
    if( textVal == "d" ) { // scrolldown
        ctCursor.setBaseWord( ctCursor.getWord() );
    }
    if( textVal == "b" ) { // bottom
        var posLastWord = lines[ ctCursor.getLine() ].words.length - 1;
        ctCursor.setWord( posLastWord );
        ctCursor.setBaseWord( posLastWord - 9 );
    }
    // boundary check
    if( ctCursor.getBaseWord() < 0 )
        ctCursor.setBaseWord( 0 );
    else if( ctCursor.getBaseWord() > lines[ ctCursor.getLine() ].words.length - 1 )
        ctCursor.setBaseWord( lines[ ctCursor.getLine() ].words.length - 1 );
};




self.setCursorBaseLine = function( textVal ) {
    // textVal is one of: "t" / "u" / "d" / "b"
    if( textVal == "t" ){ //top
        ctCursor.setBaseLine( 0 );
        ctCursor.setLine( 0 );
    }
    if( textVal == "u" ) { //scrollup
        ctCursor.setBaseLine( ctCursor.getLine() - 9 );
    }
    if( textVal == "d" ) { // scrolldown
        ctCursor.setBaseLine( ctCursor.getLine() );
    }
    if( textVal == "b" ) { // bottom
        var posLastLine = lines.length - 1;
        ctCursor.setLine( posLastLine );
        ctCursor.setBaseLine( posLastLine - 9 );
    }
    // boundary check
    if( ctCursor.getBaseLine() < 0 ) {
        ctCursor.setBaseLine( 0 );
    } else if( ctCursor.getBaseLine() > lines.length - 1 ) {
        ctCursor.setBaseLine( lines.length - 1 );
    }
};




self.getTextForSpeech = function( tactileInputObj ) {
    var ret = "";
    if( tactileInputObj.hasOwnProperty( 'l' ) ) { // line  
        var lIndex = self.getCursorLine();
        if( lIndex != -1 ) {
            var theLineObj = lines[ lIndex ];
            ret = theLineObj.text;
        }
    } else if( tactileInputObj.hasOwnProperty( 'w' ) ) { // word
        var lIndex = self.getCursorLine();
        if( lIndex != -1 ) {
            var wIndex = self.getCursorWord();
            if( wIndex != -1 ) { 
                var theWordObj = lines[ lIndex ].words[ wIndex ];
                ret = theWordObj.text;
            }
        }
    } else if( tactileInputObj.hasOwnProperty( 'c' ) ) { // char
        var lIndex = self.getCursorLine();
        if( lIndex != -1 ) {
            var wIndex = self.getCursorWord();
            if( wIndex != -1 ) {
                var cIndex = self.getCursorChar();
                var theCharObj = lines[ lIndex ].words[ wIndex ].chars[ cIndex ];
                ret = theCharObj.text;
            }
        }
    }
    return ret;
};




self.getCursorLine = function() {
    return ctCursor.getLine();
};




self.getCursorWord = function() {
    return ctCursor.getWord();
};




self.getCursorChar = function() {
    return ctCursor.getChar();
};




self.setCursorLine = function( val, callback ) {
    val = parseInt( val );
    if( val >= 0 && val + ctCursor.getBaseLine() >= 0 && val + ctCursor.getBaseLine() < lines.length ) { 
        ctCursor.setLine( val );
        callback( true );
    } else
        callback();
};




self.setCursorWord = function( val, callback ) {
    val = parseInt( val );
    var tline = ctCursor.getLine();
    var cond1 = (val >= 0 );
    var bw = ctCursor.getBaseWord();
    var cond2 = val + bw >= 0;
    var wl = lines[ tline ].words.length;
    var cond3 = val + bw < wl;
    if( val >= 0 && val + ctCursor.getBaseWord() >= 0 && val + ctCursor.getBaseWord() < lines[ tline ].words.length ) {
        ctCursor.setWord( val );
        callback( true );
    } else
        callback();
};




self.setCursorChar = function( val, callback ) {
    val = parseInt(val);
    var line2get = ctCursor.getLine();
    var word2get = ctCursor.getWord();
    var theLine = lines[ line2get ];
    var w = theLine.words[ word2get ];
    var theWord = lines[ ctCursor.getLine() ].words[ ctCursor.getWord() ];
    if( typeof theWord == "object" && theWord.chars ) {
        var tchar = theWord.chars.length;
        if( val >= 0 && val + ctCursor.getBaseChar() >= 0 && val + ctCursor.getBaseChar() < tchar ) {
            ctCursor.setChar( val );
            callback( true );
        } else
            callback();
    }
};




self.getLines = function() {
    return lines;
};




self.getCursor = function() {
    return { 'line' : self.getCursorLine(),
             'word' : self.getCursorWord(),
             'char' : self.getCursorChar() 
    };
}




self.getCursorArduino = function() {
// returns a "clean" cursor, safe to be fed to Arduino,
// offsets ctCursor .line .word and .char values with the baseLine baseWord baseChar
// range of .line .word and .char is ALWAYS WITHIN 0-9 ONLY!
    return { 'line' : self.getCursorLine() - ctCursor.getBaseLine(),
             'word' : self.getCursorWord() - ctCursor.getBaseWord(),
             'char' : self.getCursorChar() - ctCursor.getBaseChar()
           };
}




self.getCursorBases = function() {
    return { 'line' : ctCursor.getBaseLine(),
             'word' : ctCursor.getBaseWord(),
             'char' : ctCursor.getBaseChar()
    }
}




self.deleteChar = function( callback ) {
    // the char to the left of oldchar will be deleted (the previous char)
    // all characters from the position of oldchar to the right (oldchar included) will be moved leftwards
    var oldCursor = self.getCursor();
    var oldLine = lines[ oldCursor.line ];
    var oldWord = oldLine.words[ oldCursor.word ];
    var oldChar = oldLine.words[ oldCursor.word ].chars[ oldCursor.char ];

    // should try change this to =0?
    if( oldCursor.char >= 9 ) {
        oldCursor.char = oldCursor.char % 9;
    }

    var oldCharIndex = ctCursor.getBaseChar() + oldCursor.char;
    // delete the char to the left of oldChar
    oldWord.chars.splice( (oldCharIndex - 1 ), 1  );
   
    oldWord.rebuild();

    oldLine.rebuild();

    self.buildVisualText();

    // update cursor, decrement position by 1 coz of deletion of 1 char
    var nextCharIndex = oldCharIndex - 1;
    console.log( ctCursor.getChar() );

    ctCursor.setBaseChar( Math.floor( nextCharIndex / 9 ) * 9 );

    // shoudl this be =0?
    if( nextCharIndex >= 9 ) { // keep last slider position clear
        nextCharIndex = nextCharIndex % 9;
    }
    ctCursor.setChar( nextCharIndex );
    console.log( "nextCharIndex " + nextCharIndex );
    

        
    console.log( "ctCursor.getChar " + ctCursor.getChar() );
    // preparing callback for socket    
    var changedLines = [];
    changedLines.push( oldLine );
    var data = { 'changedLines': changedLines,'cursor': self.getCursor(), arduinoCursor : self.getCursorArduino() };
    console.log( data );
    callback( data );
}




self.insertChar = function( aKey, callback ) {
    // new character will be placed at the location of old character in the text,
    // old characters will be pushed rightwards
    var oldCursor = self.getCursor();
    var oldLine = lines[ oldCursor.line ];
    var oldWord = oldLine.words[ oldCursor.word ];
    var oldChar = oldWord.chars[ oldCursor.char ];
    //the line below ensures rightmost bracket is always not used. 
    //If any char is inserted here, it will placed at index 0, the leftmost one, 
    //this is equivalent with pressing the pagedown button once, and then insert the char on leftmost place.
    if( oldCursor.char >= 9 ) {
        var baseCharOffset = Math.floor( oldCursor.char / 9 ) * 9;
        ctCursor.setBaseChar( baseCharOffset );
        oldCursor.char = oldCursor.char % 9;  
    }
    var oldCharIndex = ctCursor.getBaseChar() + oldCursor.char;
    
    // determine the new char object
    var newChar = { 'index': oldCharIndex, 'text' : aKey.sequence }; // new char will be placed at the location of oldChar, and push old chars rightwards
    //console.log( "           newChar is: " );
    //console.log( newChar );
    // insert the new char
    oldWord.chars.splice( (oldCharIndex ), 0, newChar );
   
    oldWord.rebuild();

    oldLine.rebuild();

    self.buildVisualText();

    // update cursor, increment position by 1 coz of insertion of a new char
    var nextCharIndex = oldCharIndex + 1; // increment the position of cursor after insertion of 1 char
    ctCursor.setBaseChar( Math.floor( nextCharIndex / 9 ) * 9 );

    if( nextCharIndex >= 9 ) { // keep last slider position clear
        nextCharIndex = nextCharIndex % 9;
    }
    ctCursor.setChar( nextCharIndex );
    console.log( "ctCursor.getChar is " + ctCursor.getChar() );

    // do callback for socket
    //theCursor.char += 1; // not needed right?
    var changedLines = [];
    changedLines.push( oldLine );
    var data = { 'changedLines': changedLines,'cursor': self.getCursor(), 'arduinoCursor' : self.getCursorArduino() };
    callback( data );
}




self.clone = function(obj) {
            // Handle the 3 simple types, and null or undefined
            if (null == obj || "object" != typeof obj) return obj;

            // Handle Date
            if (obj instanceof Date) {
                var copy = new Date();
                copy.setTime(obj.getTime());
                return copy;
            }

            // Handle Array
            if (obj instanceof Array) {
                var copy = [];
                for (var i = 0, len = obj.length; i < len; i++) {
                    copy[i] = self.clone(obj[i]);
                }
                return copy;
            }

            // Handle Object
            if (obj instanceof Object) {
                var copy = {};
                for (var attr in obj) {
                    if (obj.hasOwnProperty(attr)) copy[attr] = self.clone(obj[attr]);
                }
                return copy;
            }

            throw new Error("Unable to copy obj! Its type isn't supported.");
};





self.getCharText = function( cursor ) {
    return( lines[ cursor.line ].words[ cursor.word ].chars[ cursor.char ].text );
};




self.moveCursorToMergedWord = function( oldCursor, newCursor ) {
    var arduinoCursor = self.clone( newCursor );

    // set baseWord regardless of whether or not arduinoCursor.word is >=9
    var baseWordOffset = Math.floor( arduinoCursor.word / 9 ) * 9;
    ctCursor.setBaseWord( baseWordOffset );

    if( arduinoCursor.word >= 9 ) {
        arduinoCursor.word = arduinoCursor.word % 9;
        ctCursor.setWord( arduinoCursor.word );
    }
    
    if( arduinoCursor.char >= 9 ) {
        var baseCharOffset = Math.floor( arduinoCursor.char / 9 ) * 9;
        ctCursor.setBaseChar( baseCharOffset );
        arduinoCursor.char = arduinoCursor.char % 9;
        ctCursor.setChar( arduinoCursor.char );
    }
    

    
    var changedLines = [ lines[oldCursor.line] ];
    self.setCursorWord( newCursor.word, function() {  
            self.setCursorChar( newCursor.char, function() {
                var data = { 'changedLines': changedLines,'cursor': newCursor, 'arduinoCursor' : arduinoCursor };
                self.emit( 'cdUpdated', data );
            } );
    } );
};




self.moveCursorToNewLine = function( oldCursor, newCursor ) {
        var arduinoCursor = self.clone( newCursor );
        
        if( arduinoCursor.line >= 9 ) {
            var baseLineOffset = Math.floor( arduinoCursor.line / 9 ) * 9;
            ctCursor.setBaseLine( baseLineOffset );
            arduinoCursor.line = arduinoCursor.line % 9;            
            ctCursor.setLine( arduinoCursor.line );

        }
        arduinoCursor.word = 0;
        arduinoCursor.char = 0;
        newCursor.word = 0;
        newCursor.char = 0;
        var changedLines = [ lines[oldCursor.line], lines[oldCursor.line + 1] ];
        ctCursor.setBaseWord( 0 );
        ctCursor.setWord( 0 );        
        ctCursor.setBaseChar( 0 );   
        ctCursor.setChar( 0 );
        self.setCursorLine( arduinoCursor.line,function(){
            self.setCursorWord( newCursor.word, function() {
                self.setCursorChar( 0, function() {
                    var data = { 'changedLines': changedLines,'cursor': newCursor, 'arduinoCursor' : arduinoCursor };
                    console.log( data );
                    self.emit( 'cdUpdated', data );
                });
            } );    
        } );    
};




self.moveCursorToNewSpaceWord = function( oldCursor, newCursor ) {
        var arduinoCursor = self.clone( newCursor );
        arduinoCursor.line %= 9;
        
        console.log( "! gotcha! " + arduinoCursor.line );
        // remap values of the cursor into base values + slider values
        if( arduinoCursor.word >= 9 ) {
            var baseWordOffset = Math.floor( arduinoCursor.word / 9 ) * 9;
            ctCursor.setBaseWord( baseWordOffset );
            arduinoCursor.word = arduinoCursor.word % 9;
            ctCursor.setWord( arduinoCursor.word );
        }
        arduinoCursor.char = 0;
        newCursor.char = 0;
        ctCursor.setBaseChar( 0 );
        self.setCursorWord( newCursor.word, function() {  
            self.setCursorChar( 0, function() {
                var changedLines = [ lines[oldCursor.line] ];
                var data = { 'changedLines': changedLines,'cursor': newCursor, 'arduinoCursor' : arduinoCursor };
                self.emit( 'cdUpdated', data );
            } );
        } );
};




self.determineLCBackspace = function( aCursor ) {
    var ret = 1;
    if( aCursor.char == 0 ) {
        if( aCursor.word == 0 ) { 
            ret = 3; // at beginning of a line
        } else {
            ret = 2; // at beginning of a word
        }
    }
    return ret;
};




self.determineLCEnter = function( aCursor ) {
    var ret = 2;
    if( self.getCharText( aCursor ) == " "  &&
        aCursor.word == lines[ aCursor.line ].words.length - 1 &&
        aCursor.char == lines[ aCursor.line ].words[ aCursor.word ].chars.length - 1 ) {
        ret = 1;
    }
    return ret;
};




self.determineLCSpace = function( aCursor ) {
   var ret = 0;
    if( self.getCharText( aCursor ) == " " ) 
        ret = 1; // cursor is on a space char, at the end of a word, line or docu
    else if( aCursor.char == 0 )
        ret = 2; // cursor is at the beginning of a word
    else
        ret = 3; // cursor is within a wor
    return ret;
};




self.splitToTwoLines = function( aCursor ) {
    var theLine = lines[ aCursor.line ];
    var tail = {};
    var head = {};
    var tailText = "";
    var headText = "";
    var headIndex = theLine.index;
    var tailIndex = headIndex +1;
    // make the two parts
    if( ctCursor.getWord() == 0 && ctCursor.getChar() == 0 ) { // at the beginning of the line
        var head = self.buildLine( theLine.index, "" );
        var tail = theLine;
        tail.index = theLine.index + 1;
    } else { // cursor in the middle of a word
        // populate headText and tailText, exclusive of the current word
        for( var i = 0; i < aCursor.word; i++ ) {
            headText += theLine.words[ i ].text;
        }

        for( var j = aCursor.word +1; j < theLine.words.length; j++ ) {
            tailText += theLine.words[ j ].text;    
        }
        tailText = tailText.substring( 0, tailText.length - 1 ); // get rid of trailing space

        // add characters from appropriate section of the current word to headText and tailText
        var theWord = theLine.words[ aCursor.word ];
        for( var i = 0; i < aCursor.char; i++ ) {
            headText += theWord.chars[ i ].text;
        }
        var subTailText = " ";
        for( var j = aCursor.char; j < theWord.chars.length; j++ ) {
            subTailText += theWord.chars[ j ].text;
        }
        tailText = subTailText + tailText;
        /* why would I want this?
        // add a space at the end of headText and make sure there are no spaces at the beginning and end of tailText
        if( headText[headText.length - 1] != " " )
            headText += " ";
        */
        if( tailText[ 0 ] == " " )
            tailText = tailText.substring( 1, tailText.length );
        if( tailText[ tailText.length - 1 ] == " " )
            tailText = tailText.substring( 0, tailText.length-1 );

        head = self.buildLine( headIndex, headText );
        tail = self.buildLine( tailIndex, tailText );
    }
    return [head, tail];
};




self.reindexLines = function() {
    for( var i = 0; i < lines.length; i ++ ) {
        lines[ i ].index = i;
    }
};




self.changedByChar = function( aKey, callback ) {
    // change the document according to the key pressed and location of the cursor
    // calculate new position for the sliders
    // inform main app using emit
    var theCursor = self.getCursor();
//    if( aKey.hasOwnProperty( "name" ) ) {
    if( aKey.name == "backspace" ) {
        var logicCode = self.determineLCBackspace( theCursor );
        switch( logicCode ) {
            case 1 : // cursor is inside a word
                // delete the previous char in the word
                self.deleteChar( function( data ) {  
                    self.emit( 'cdUpdated', data );
                    callback( data );
                } );
            break;
            case 2 : // cursor is at the beginning of a word
                // merge current word with previous word
                var cLine = lines[ theCursor.line ];
                var cWord = cLine.words[ theCursor.word ];
                var pWord = cLine.words[ theCursor.word - 1 ];
                var targetCharLoc = pWord.chars.length - 1;
                pWord.chars.splice( targetCharLoc, 1 );
                pWord.chars = pWord.chars.concat( cWord.chars );
                pWord.rebuild();
                cLine.words.splice( theCursor.word, 1 ); 
                cLine.rebuild();
                var targetWordLoc = theCursor.word - 1;
                var targetCursor = { 'line' : theCursor.line, 
                                  'word' : targetWordLoc,
                                  'char' : targetCharLoc
                                };
               debugger;
               self.moveCursorToMergedWord( theCursor, targetCursor );        
            break;
            case 3 : // cursor is at the beginning of a line
                // merge current line with previous line
                
            break;
        }
    } else if( aKey.name == "return" ) {
        var logicCode = self.determineLCEnter( theCursor );
        switch( logicCode ) {
            case 1: // cursor is on a space at the end of a line
                // insert a new line below current line, containing a spaceword
                var targetCursor = { 'line' : theCursor.line +1,
                                     'word' : 0,
                                     'char' : 0
                                   };
                var theLine = self.buildLine( targetCursor.line, "" );
                lines.splice( targetCursor.line, 0, theLine );
                self.reindexLines();
                console.log( "here!" );
                console.log( lines[ targetCursor.line ] );                                   

                self.moveCursorToNewLine( theCursor, targetCursor );
            break;
            case 2: // cursor is elsewhere
                // split the current line into two lines at the position of the cursor
                var splitLines = self.splitToTwoLines( theCursor );
                // splice the lines
                lines.splice( theCursor.line, 1, splitLines[ 0 ], splitLines[ 1 ] );
                self.reindexLines();
                // move the cursor to new line
                var targetCursor = { 'line' : theCursor.line + 1,
                                     'word' : 0,
                                     'char' : 0
                                   };
                self.moveCursorToNewLine( theCursor, targetCursor );
            break;
        };
    } else if( aKey.name == "space" ) {
        var logicCode = self.determineLCSpace( theCursor );
        switch( logicCode ) {
            case 1 : // cursor is on a space, at the end of a word or line or docu
                var targetCursor = { 'line' : theCursor.line, 'word' : theCursor.word + 1, 'char' : 0 }
                self.addSpaceWord( targetCursor );
                self.moveCursorToNewSpaceWord( theCursor, targetCursor );
                break;
            case 2 : // cursor is at the beginning of a word
                var targetCursor = theCursor;
                self.addSpaceWord( targetCursor );
                self.moveCursorToNewSpaceWord( theCursor, targetCursor );
                break;
            case 3 : // cursor is within a word
                // split the current word into two
                // finalize the head
                var tobeSplit = lines[ theCursor.line ].words[ theCursor.word ];
                var head = self.clone( tobeSplit );
                head.chars.splice( theCursor.char, head.chars.length - theCursor.char - 1 );
                head.rebuild();
                // finalize the tail
                var tail = self.clone( tobeSplit );
                tail.chars.splice( 0, theCursor.char );
                tail.rebuild();
               
                // splice head and tail to the line then rebuild
                var theLine = lines[ theCursor.line ];
                theLine.words.splice( theCursor.word, 1, head, tail );
                lines[ theCursor.line ].rebuild();
                // move cursor to tail
                var targetCursor = { 'line' : theCursor.line, 'word' : theCursor.word + 1, 'char' : 0 }
                self.moveCursorToNewSpaceWord( theCursor, targetCursor );
        }
//    }    
    }else {
        console.log( "aKey = " + aKey );
        self.insertChar( aKey, function( data ) {  
            self.emit( 'cdUpdated', data ); 
            callback( data );       
        } );
    }

}

}; // end function constructor






util.inherits( ChorusDocument, EventEmitter );

module.exports = ChorusDocument;
